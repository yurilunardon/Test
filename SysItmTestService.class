package net.synergy2.tester.sys.itm;

import java.math.BigDecimal;
import net.synergy2.base.params.Params;
import net.synergy2.base.util.datas.StringUtil;
import net.synergy2.db.sys.itm.AngBom;
import net.synergy2.db.sys.itm.AngItm;
import net.synergy2.db.sys.itm.AngItmClsMul001;
import net.synergy2.db.sys.itm.AngItmLvlSug;
import net.synergy2.db.sys.itm.AngItmMdl;
import net.synergy2.db.sys.itm.AngItmMdlVrn;
import net.synergy2.db.sys.itm.AngItmVrn;
import net.synergy2.db.sys.itm.AngPrdCyc;
import net.synergy2.db.sys.itm.AngPrdCycOpr;
import net.synergy2.db.sys.itm.AngPrdCycOprLnk;
import net.synergy2.db.sys.itm.AngPrdCycTyp;
import net.synergy2.db.sys.itm.AngPrdPrc;
import net.synergy2.db.sys.itm.AngPrdVrn;
import net.synergy2.db.sys.itm.AngPrdVrnCat;
import net.synergy2.db.sys.itm.AngPrdWrk;
import net.synergy2.db.sys.itm.AngUniMea;
import net.synergy2.db.sys.org.OrgLvl;
import net.synergy2.tester.base.RestTest;
import net.synergy2.tester.base.TestUtil;

public class SysItmTestService {

    public SysItmTestService (RestTest rest) {
        this.rest = rest;
    }

    private final RestTest rest;

    /************************************************************************************/
    /** AngItm **************************************************************************/
    /************************************************************************************/

    public AngItm get (AngItm item) {
        return rest.get (rest.getByIdUrl (item) + item.getUid (), AngItm.class);
    }

    public AngItm post (AngItm item) {
        var inputParams = itemSaveParams ();
        item = rest.post (item.getBaseUrl (), item, inputParams.get (), AngItm.class);
        return item;
    }
    
    public AngItm postError (AngItm item) {
        var inputParams = itemSaveParams ();
        item = rest.postError (item.getBaseUrl (), item, inputParams.get (), AngItm.class);
        return item;
    }

    public AngItm put (AngItm item) {
        var inputParams = itemSaveParams ();
        item = rest.put (item.getBaseUrl () + "/all", item, inputParams.get (), AngItm.class);
        return item;
    }

    public AngItm putError (AngItm item) {
        var inputParams = itemSaveParams ();
        item = rest.putError (item.getBaseUrl () + "/all", item, inputParams.get (), AngItm.class);
        return item;
    }

    private Params itemSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngItm item (String itmDsc) {
        var angItm = AngItm.newInstance ();
        angItm.setItmCod (TestUtil.getSecureCod ());
        angItm.setItmDsc (itmDsc);

        return angItm;
    }
    
    
    /************************************************************************************/
    /** AngItmClsMul ********************************************************************/
    /************************************************************************************/
    
    public AngItmClsMul001 itmClsMul001 (String itmClsMulDsc) {
        var angItmClsMul001 = AngItmClsMul001.newInstance ();;
        angItmClsMul001.setClsCod (TestUtil.getSecureCod ());
        angItmClsMul001.setClsDsc (itmClsMulDsc);

        return angItmClsMul001;
    }
    
    public AngItmClsMul001 post (AngItmClsMul001 angItmClsMul001) {
        var inputParams = itemSaveParams ();
        angItmClsMul001 = rest.post (angItmClsMul001.getBaseUrl (), angItmClsMul001, inputParams.get (), AngItmClsMul001.class);
        return angItmClsMul001;
    }

    public void addMultiClassification (AngItm item, AngItmClsMul001 classif) {
        if (StringUtil.isEmpty (item.getClsMul001Uid ())) {
            item.setClsMul001Uid ("|" + classif.getUid () + "|");
        } else {
            item.setClsMul001Uid (item.getClsMul001Uid () + classif.getUid () + "|");
        }
    }
    
    /************************************************************************************/
    /** AngPrdCyc ***********************************************************************/
    /************************************************************************************/

    public AngPrdCyc get (AngPrdCyc cycle) {
        return rest.get (rest.getByIdUrl (cycle) + cycle.getUid (), AngPrdCyc.class);
    }

    public AngPrdCyc post (AngPrdCyc cycle) {
        var inputParams = cycleSaveParams ();
        cycle = rest.post (cycle.getBaseUrl (), cycle, inputParams.get (), AngPrdCyc.class);
        return cycle;
    }

    public AngPrdCyc postError (AngPrdCyc cycle) {
        var inputParams = cycleSaveParams ();
        cycle = rest.postError (cycle.getBaseUrl (), cycle, inputParams.get (), AngPrdCyc.class);
        return cycle;
    }

    public AngPrdCyc put (AngPrdCyc cycle) {
        var inputParams = cycleSaveParams ();
        cycle = rest.put (cycle.getBaseUrl () + "/all", cycle, inputParams.get (), AngPrdCyc.class);
        return cycle;
    }

    public AngPrdCyc putError (AngPrdCyc cycle) {
        var inputParams = cycleSaveParams ();
        cycle = rest.putError (cycle.getBaseUrl () + "/all", cycle, inputParams.get (), AngPrdCyc.class);
        return cycle;
    }

    private Params cycleSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdCyc cycle (AngItm itm, String cycleDsc) {
        var prdCyc = AngPrdCyc.newInstance ();
        prdCyc.setPrdCycCod (TestUtil.getSecureCod ());
        prdCyc.setPrdCycDsc (cycleDsc);
        prdCyc.setItmUid (itm.getUid ());
        prdCyc.setPrdCycTypUid (AngPrdCycTyp.LINKED_CYCLE);
        itm.addPrdCycLst (prdCyc);
        return prdCyc;
    }


    /************************************************************************************/
    /** AngPrdCycOpr ********************************************************************/
    /************************************************************************************/

    public AngPrdCycOpr get (AngPrdCycOpr cycleOperation) {
        return rest.get (rest.getByIdUrl (cycleOperation) + cycleOperation.getUid (), AngPrdCycOpr.class);
    }

    public AngPrdCycOpr post (AngPrdCycOpr cycleOperation) {
        var inputParams = cycleOperationSaveParams ();
        cycleOperation = rest.post (cycleOperation.getBaseUrl (), cycleOperation, inputParams.get (), AngPrdCycOpr.class);
        return cycleOperation;
    }

    public AngPrdCycOpr postError (AngPrdCycOpr cycleOperation) {
        var inputParams = cycleOperationSaveParams ();
        cycleOperation = rest.postError (cycleOperation.getBaseUrl (), cycleOperation, inputParams.get (), AngPrdCycOpr.class);
        return cycleOperation;
    }

    public AngPrdCycOpr put (AngPrdCycOpr cycleOperation) {
        var inputParams = cycleOperationSaveParams ();
        cycleOperation = rest.put (cycleOperation.getBaseUrl () + "/all", cycleOperation, inputParams.get (), AngPrdCycOpr.class);
        return cycleOperation;
    }

    public AngPrdCycOpr putError (AngPrdCycOpr cycleOperation) {
        var inputParams = cycleOperationSaveParams ();
        cycleOperation = rest.putError (cycleOperation.getBaseUrl () + "/all", cycleOperation, inputParams.get (), AngPrdCycOpr.class);
        return cycleOperation;
    }

    private Params cycleOperationSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdCycOpr cycleOperation (AngPrdCyc prdCyc, AngItmVrn itemVariant, String oprNum, String cycOprDsc) {
        var prdCycOpr = AngPrdCycOpr.newInstance ();
        prdCycOpr.setPrdCycUid (prdCyc.getUid ());
        prdCycOpr.setItmVrnUid (itemVariant == null ? null : itemVariant.getUid ());
        prdCycOpr.setOprNum (oprNum);
        prdCycOpr.setOprDsc (cycOprDsc);
        return prdCycOpr;
    }

    /************************************************************************************/
    /** AngUniMea ***********************************************************************/
    /************************************************************************************/

    public AngUniMea get (AngUniMea unitMeasure) {
        return rest.get (rest.getByCodeUrl (unitMeasure), AngUniMea.class);
    }

    public AngUniMea post (AngUniMea unitMeasure) {
        var inputParams = measureUnitSaveParams ();
        unitMeasure = rest.post (unitMeasure.getBaseUrl (), unitMeasure, inputParams.get (), AngUniMea.class);
        return unitMeasure;
    }

    public AngUniMea postError (AngUniMea unitMeasure) {
        var inputParams = measureUnitSaveParams ();
        unitMeasure = rest.postError (unitMeasure.getBaseUrl (), unitMeasure, inputParams.get (), AngUniMea.class);
        return unitMeasure;
    }

    public AngUniMea put (AngUniMea unitMeasure) {
        var inputParams = measureUnitSaveParams ();
        unitMeasure = rest.put (unitMeasure.getBaseUrl () + "/all", unitMeasure, inputParams.get (), AngUniMea.class);
        return unitMeasure;
    }

    public AngUniMea putError (AngUniMea unitMeasure) {
        var inputParams = measureUnitSaveParams ();
        unitMeasure = rest.putError (unitMeasure.getBaseUrl () + "/all", unitMeasure, inputParams.get (), AngUniMea.class);
        return unitMeasure;
    }

    private Params measureUnitSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngUniMea measureUnit (String UniMeaDsc) {
        var uniMea = AngUniMea.newInstance ();
        uniMea.setUniMeaCod (TestUtil.getSecureCod ());
        uniMea.setUniMeaDsc (UniMeaDsc);
        return uniMea;
    }

    /************************************************************************************/
    /** AngPrdPrc ***********************************************************************/
    /************************************************************************************/

    public AngPrdPrc get (AngPrdPrc productionProcess) {
        return rest.get (rest.getByCodeUrl (productionProcess), AngPrdPrc.class);
    }

    public AngPrdPrc post (AngPrdPrc productionProcess) {
        var inputParams = productionProcessSaveParams ();
        productionProcess = rest.post (productionProcess.getBaseUrl (), productionProcess, inputParams.get (), AngPrdPrc.class);
        return productionProcess;
    }

    public AngPrdPrc postError (AngPrdPrc productionProcess) {
        var inputParams = productionProcessSaveParams ();
        productionProcess = rest.postError (productionProcess.getBaseUrl (), productionProcess, inputParams.get (), AngPrdPrc.class);
        return productionProcess;
    }

    public AngPrdPrc put (AngPrdPrc productionProcess) {
        var inputParams = productionProcessSaveParams ();
        productionProcess = rest.put (productionProcess.getBaseUrl () + "/all", productionProcess, inputParams.get (), AngPrdPrc.class);
        return productionProcess;
    }

    public AngPrdPrc putError (AngPrdPrc productionProcess) {
        var inputParams = productionProcessSaveParams ();
        productionProcess = rest.putError (productionProcess.getBaseUrl () + "/all", productionProcess, inputParams.get (), AngPrdPrc.class);
        return productionProcess;
    }

    private Params productionProcessSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdPrc productionProcess (String prdPrcDsc) {
        var angPrdPrc = AngPrdPrc.newInstance ();
        angPrdPrc.setPrcCod (TestUtil.getSecureCod ());
        angPrdPrc.setPrcDsc (prdPrcDsc);

        return angPrdPrc;
    }

    /************************************************************************************/
    /** AngPrdWrk ***********************************************************************/
    /************************************************************************************/

    public AngPrdWrk get (AngPrdWrk productionWork) {
        return rest.get (rest.getByCodeUrl (productionWork), AngPrdWrk.class);
    }

    public AngPrdWrk post (AngPrdWrk productionWork) {
        var inputParams = productionWorkSaveParams ();
        productionWork = rest.post (productionWork.getBaseUrl (), productionWork, inputParams.get (), AngPrdWrk.class);
        return productionWork;
    }

    public AngPrdWrk postError (AngPrdWrk productionWork) {
        var inputParams = productionWorkSaveParams ();
        productionWork = rest.postError (productionWork.getBaseUrl (), productionWork, inputParams.get (), AngPrdWrk.class);
        return productionWork;
    }

    public AngPrdWrk put (AngPrdWrk productionWork) {
        var inputParams = productionWorkSaveParams ();
        productionWork = rest.put (productionWork.getBaseUrl () + "/all", productionWork, inputParams.get (), AngPrdWrk.class);
        return productionWork;
    }

    public AngPrdWrk putError (AngPrdWrk productionWork) {
        var inputParams = productionWorkSaveParams ();
        productionWork = rest.putError (productionWork.getBaseUrl () + "/all", productionWork, inputParams.get (), AngPrdWrk.class);
        return productionWork;
    }

    private Params productionWorkSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdWrk productionWork (String prdWrkDsc) {
        var angPrdWrk = AngPrdWrk.newInstance ();
        angPrdWrk.setWrkCod (TestUtil.getSecureCod ());
        angPrdWrk.setWrkDsc (prdWrkDsc);

        return angPrdWrk;
    }

    /************************************************************************************/
    /** AngPrdCycOprLnk *****************************************************************/
    /************************************************************************************/

    public AngPrdCycOprLnk get (AngPrdCycOprLnk oprLnk) {
        return rest.get (rest.getByCodeUrl (oprLnk), AngPrdCycOprLnk.class);
    }

    public AngPrdCycOprLnk post (AngPrdCycOprLnk oprLnk) {
        var inputParams = cycleOperationLinkSaveParams ();
        oprLnk = rest.post (oprLnk.getBaseUrl (), oprLnk, inputParams.get (), AngPrdCycOprLnk.class);
        return oprLnk;
    }

    public AngPrdCycOprLnk postError (AngPrdCycOprLnk oprLnk) {
        var inputParams = cycleOperationLinkSaveParams ();
        oprLnk = rest.postError (oprLnk.getBaseUrl (), oprLnk, inputParams.get (), AngPrdCycOprLnk.class);
        return oprLnk;
    }

    public AngPrdCycOprLnk put (AngPrdCycOprLnk oprLnk) {
        var inputParams = cycleOperationLinkSaveParams ();
        oprLnk = rest.put (oprLnk.getBaseUrl () + "/all", oprLnk, inputParams.get (), AngPrdCycOprLnk.class);
        return oprLnk;
    }

    public AngPrdCycOprLnk putError (AngPrdCycOprLnk oprLnk) {
        var inputParams = cycleOperationLinkSaveParams ();
        oprLnk = rest.putError (oprLnk.getBaseUrl () + "/all", oprLnk, inputParams.get (), AngPrdCycOprLnk.class);
        return oprLnk;
    }

    private Params cycleOperationLinkSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdCycOprLnk cycleOperationLink (AngPrdCycOpr preOpr, AngPrdCycOpr nxtOpr) {
        var cycOprLnk = AngPrdCycOprLnk.newInstance ();

        cycOprLnk.setPrePrdCycOprUid (preOpr.getUid ());
        cycOprLnk.setNxtPrdCycOprUid (nxtOpr.getUid ());

        return cycOprLnk;
    }

    /************************************************************************************/
    /** AngBom **************************************************************************/
    /************************************************************************************/

    public AngBom get (AngBom bom) {
        return rest.get (rest.getByCodeUrl (bom), AngBom.class);
    }

    public AngBom post (AngBom bom) {
        var inputParams = billOfMaterialSaveParams ();
        bom = rest.post (bom.getBaseUrl (), bom, inputParams.get (), AngBom.class);
        return bom;
    }

    public AngBom postError (AngBom bom) {
        var inputParams = billOfMaterialSaveParams ();
        bom = rest.postError (bom.getBaseUrl (), bom, inputParams.get (), AngBom.class);
        return bom;
    }

    public AngBom put (AngBom bom) {
        var inputParams = billOfMaterialSaveParams ();
        bom = rest.put (bom.getBaseUrl () + "/all", bom, inputParams.get (), AngBom.class);
        return bom;
    }

    public AngBom putError (AngBom bom) {
        var inputParams = billOfMaterialSaveParams ();
        bom = rest.putError (bom.getBaseUrl () + "/all", bom, inputParams.get (), AngBom.class);
        return bom;
    }

    private Params billOfMaterialSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngBom billOfMaterial (AngItm productedItem, AngItm itemComponent, AngItmVrn itemVariant, BigDecimal bomQty) {
        var bom = AngBom.newInstance ();

        bom.setPrdItmUid (productedItem.getUid ());
        bom.setItmUid (itemComponent.getUid ());
        bom.setItmVrnUid (itemVariant == null ? null : itemVariant.getUid ());
        bom.setIgnMis (false);
        bom.setBomQty (bomQty);
        bom.setFixQty (true);

        return bom;
    }

    /************************************************************************************/
    /** AngPrdVrnCat ********************************************************************/
    /************************************************************************************/

    public AngPrdVrnCat post (AngPrdVrnCat itmVrn) {
        var inputParams = variantCategorySaveParams ();
        itmVrn = rest.post (itmVrn.getBaseUrl (), itmVrn, inputParams.get (), AngPrdVrnCat.class);
        return itmVrn;
    }

    public AngPrdVrnCat postError (AngPrdVrnCat itmVrn) {
        var inputParams = variantCategorySaveParams ();
        itmVrn = rest.postError (itmVrn.getBaseUrl (), itmVrn, inputParams.get (), AngPrdVrnCat.class);
        return itmVrn;
    }

    public AngPrdVrnCat put (AngPrdVrnCat itmVrn) {
        var inputParams = variantCategorySaveParams ();
        itmVrn = rest.put (itmVrn.getBaseUrl () + "/all", itmVrn, inputParams.get (), AngPrdVrnCat.class);
        return itmVrn;
    }

    public AngPrdVrnCat putError (AngPrdVrnCat itmVrn) {
        var inputParams = variantCategorySaveParams ();
        itmVrn = rest.putError (itmVrn.getBaseUrl () + "/all", itmVrn, inputParams.get (), AngPrdVrnCat.class);
        return itmVrn;
    }

    private Params variantCategorySaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdVrnCat variantCategory (String description) {
        var vrnCat = AngPrdVrnCat.newInstance ();

        vrnCat.setCatCod (TestUtil.getSecureCod ());
        vrnCat.setCatDsc (description);

        return vrnCat;
    }

    /************************************************************************************/
    /** AngPrdVrn ***********************************************************************/
    /************************************************************************************/

    public AngPrdVrn post (AngPrdVrn itmVrn) {
        var inputParams = variantSaveParams ();
        itmVrn = rest.post (itmVrn.getBaseUrl (), itmVrn, inputParams.get (), AngPrdVrn.class);
        return itmVrn;
    }

    public AngPrdVrn postError (AngPrdVrn itmVrn) {
        var inputParams = variantSaveParams ();
        itmVrn = rest.postError (itmVrn.getBaseUrl (), itmVrn, inputParams.get (), AngPrdVrn.class);
        return itmVrn;
    }

    public AngPrdVrn put (AngPrdVrn itmVrn) {
        var inputParams = variantSaveParams ();
        itmVrn = rest.put (itmVrn.getBaseUrl () + "/all", itmVrn, inputParams.get (), AngPrdVrn.class);
        return itmVrn;
    }

    public AngPrdVrn putError (AngPrdVrn itmVrn) {
        var inputParams = variantSaveParams ();
        itmVrn = rest.putError (itmVrn.getBaseUrl () + "/all", itmVrn, inputParams.get (), AngPrdVrn.class);
        return itmVrn;
    }

    private Params variantSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngPrdVrn variant (String description, AngPrdVrnCat category) {
        var vrn = AngPrdVrn.newInstance ();

        vrn.setVrnCod (TestUtil.getSecureCod ());
        vrn.setVrnDsc (description);
        vrn.setCatUid (category.getUid ());

        return vrn;
    }

    /************************************************************************************/
    /** AngItmVrn ***********************************************************************/
    /************************************************************************************/

    public AngItmVrn get (AngItmVrn itmVrn) {
        return rest.get (rest.getByCodeUrl (itmVrn), AngItmVrn.class);
    }

    public AngItmVrn post (AngItmVrn itmVrn) {
        var inputParams = itemVariantSaveParams ();
        itmVrn = rest.post (itmVrn.getBaseUrl (), itmVrn, inputParams.get (), AngItmVrn.class);
        return itmVrn;
    }

    public AngItmVrn postError (AngItmVrn itmVrn) {
        var inputParams = itemVariantSaveParams ();
        itmVrn = rest.postError (itmVrn.getBaseUrl (), itmVrn, inputParams.get (), AngItmVrn.class);
        return itmVrn;
    }

    public AngItmVrn put (AngItmVrn itmVrn) {
        var inputParams = itemVariantSaveParams ();
        itmVrn = rest.put (itmVrn.getBaseUrl () + "/all", itmVrn, inputParams.get (), AngItmVrn.class);
        return itmVrn;
    }

    public AngItmVrn putError (AngItmVrn itmVrn) {
        var inputParams = itemVariantSaveParams ();
        itmVrn = rest.putError (itmVrn.getBaseUrl () + "/all", itmVrn, inputParams.get (), AngItmVrn.class);
        return itmVrn;
    }
    
    public void delete (AngItmVrn itmVrn) { rest.delete (itmVrn.getBaseUrl () + "/" + itmVrn.getUid ()); }

    private Params itemVariantSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngItmVrn itemVariant (AngItm item, AngPrdVrn variant, Boolean standard) {
        var itmVrn = AngItmVrn.newInstance ();

        itmVrn.setItmUid (item.getUid ());
        itmVrn.setVrnUid (variant.getUid ());
        itmVrn.setVrnStd (standard);

        return itmVrn;
    }

    /************************************************************************************/
    /** AngItmMdl ***********************************************************************/
    /************************************************************************************/

    public AngItmMdl get (AngItmMdl itmMdl) {
        return rest.get (rest.getByCodeUrl (itmMdl), AngItmMdl.class);
    }

    public AngItmMdl post (AngItmMdl itmMdl) {
        var inputParams = itemModelSaveParams ();
        itmMdl = rest.post (itmMdl.getBaseUrl (), itmMdl, inputParams.get (), AngItmMdl.class);
        return itmMdl;
    }

    public AngItmMdl postError (AngItmMdl itmMdl) {
        var inputParams = itemModelSaveParams ();
        itmMdl = rest.postError (itmMdl.getBaseUrl (), itmMdl, inputParams.get (), AngItmMdl.class);
        return itmMdl;
    }

    public AngItmMdl put (AngItmMdl itmMdl) {
        var inputParams = itemModelSaveParams ();
        itmMdl = rest.put (itmMdl.getBaseUrl () + "/all", itmMdl, inputParams.get (), AngItmMdl.class);
        return itmMdl;
    }

    public AngItmMdl putError (AngItmMdl itmMdl) {
        var inputParams = itemModelSaveParams ();
        itmMdl = rest.putError (itmMdl.getBaseUrl () + "/all", itmMdl, inputParams.get (), AngItmMdl.class);
        return itmMdl;
    }

    private Params itemModelSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngItmMdl itemModel (AngItm item, String description, Boolean standard) {
        var itmMdl = AngItmMdl.newInstance ();

        itmMdl.setMdlCod (TestUtil.getSecureCod ());
        itmMdl.setItmUid (item.getUid ());
        itmMdl.setMdlDsc (description);
        itmMdl.setMdlStd (standard);

        return itmMdl;
    }

    /************************************************************************************/
    /** AngItmMdlVrn ********************************************************************/
    /************************************************************************************/

    public AngItmMdlVrn get (AngItmMdlVrn itmMdlVrn) {
        return rest.get (rest.getByCodeUrl (itmMdlVrn), AngItmMdlVrn.class);
    }

    public AngItmMdlVrn post (AngItmMdlVrn itmMdlVrn) {
        var inputParams = itemModelVariantSaveParams ();
        itmMdlVrn = rest.post (itmMdlVrn.getBaseUrl (), itmMdlVrn, inputParams.get (), AngItmMdlVrn.class);
        return itmMdlVrn;
    }

    public AngItmMdlVrn postError (AngItmMdlVrn itmMdlVrn) {
        var inputParams = itemModelVariantSaveParams ();
        itmMdlVrn = rest.postError (itmMdlVrn.getBaseUrl (), itmMdlVrn, inputParams.get (), AngItmMdlVrn.class);
        return itmMdlVrn;
    }

    public AngItmMdlVrn put (AngItmMdlVrn itmMdlVrn) {
        var inputParams = itemModelVariantSaveParams ();
        itmMdlVrn = rest.put (itmMdlVrn.getBaseUrl () + "/all", itmMdlVrn, inputParams.get (), AngItmMdlVrn.class);
        return itmMdlVrn;
    }

    public AngItmMdlVrn putError (AngItmMdlVrn itmMdlVrn) {
        var inputParams = itemModelVariantSaveParams ();
        itmMdlVrn = rest.putError (itmMdlVrn.getBaseUrl () + "/all", itmMdlVrn, inputParams.get (), AngItmMdlVrn.class);
        return itmMdlVrn;
    }

    private Params itemModelVariantSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngItmMdlVrn itemModelVariant (AngItmVrn itemVariant, AngItmMdl model) {
        var itmMdlVrn = AngItmMdlVrn.newInstance ();

        itmMdlVrn.setItmVrnUid (itemVariant.getUid ());
        itmMdlVrn.setMdlUid (model.getUid ());

        return itmMdlVrn;
    }


    /************************************************************************************/
    /** AngItmLvlSug ********************************************************************/
    /************************************************************************************/

    public AngItmLvlSug get (AngItmLvlSug itmLvlSug) {
        return rest.get (rest.getByCodeUrl (itmLvlSug), AngItmLvlSug.class);
    }

    public AngItmLvlSug post (AngItmLvlSug itmLvlSug) {
        var inputParams = itemSuggestionSaveParams ();
        itmLvlSug = rest.post (itmLvlSug.getBaseUrl (), itmLvlSug, inputParams.get (), AngItmLvlSug.class);
        return itmLvlSug;
    }

    public AngItmLvlSug postError (AngItmLvlSug itmLvlSug) {
        var inputParams = itemSuggestionSaveParams ();
        itmLvlSug = rest.postError (itmLvlSug.getBaseUrl (), itmLvlSug, inputParams.get (), AngItmLvlSug.class);
        return itmLvlSug;
    }

    public AngItmLvlSug put (AngItmLvlSug itmLvlSug) {
        var inputParams = itemSuggestionSaveParams ();
        itmLvlSug = rest.put (itmLvlSug.getBaseUrl () + "/all", itmLvlSug, inputParams.get (), AngItmLvlSug.class);
        return itmLvlSug;
    }

    public AngItmLvlSug putError (AngItmLvlSug itmLvlSug) {
        var inputParams = itemSuggestionSaveParams ();
        itmLvlSug = rest.putError (itmLvlSug.getBaseUrl () + "/all", itmLvlSug, inputParams.get (), AngItmLvlSug.class);
        return itmLvlSug;
    }

    private Params itemSuggestionSaveParams () {
        Params inputParams = new Params ();
        return inputParams;
    }

    public AngItmLvlSug itemSuggestion (AngItm item, OrgLvl organizationLevel, AngPrdCyc cycle, AngItmMdl model) {
        var itmLvlSug = AngItmLvlSug.newInstance ();

        itmLvlSug.setItmUid (item.getUid ());
        itmLvlSug.setOrgLvlUid (organizationLevel.getUid ());
        itmLvlSug.setPrdCycUid (cycle.getUid ());
        itmLvlSug.setMdlUid (model.getUid ());

        return itmLvlSug;
    }

}
